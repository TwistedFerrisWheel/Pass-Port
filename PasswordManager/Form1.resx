<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAPUAAAAEACAAoFgAAFgAAACgAAAA9AAAAgAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAJROEAfYGDAICGhwB8iI0AhIqMAIiOkQB8kJgAC5G6AIySlQCQlpgAe5eiAJSZnACUmpwAmJ2fAHqd
        qwB6nawAep6sAJyfoQCboKEAnKChAKGhoQB5pLUADqbWAB2o1wAeqdcAIKnXAHeqvgAlqtgAKKvYAOHe
        CQAzr9oAdrDFAHawxgA1r9sAdrHGADaw2wA3sNsAOLDbADqx3AA7stwAPbPcAD6z3AA/tN0AdLbOAEa3
        3gBIuN8AS7ngAEy54ABNuuAATrrgAE+74QByvNYAUr3iAFW+4gBVv+IAV7/jAFjA4wBZwOMAcMHeAHDC
        3gBbwuQAXMLkAFzC5QBcw+UAXcPlAG7F4gBgxeYAbcXjAG7F4wBsxuMAbcbjAGvG5ABsxuQAasblAGvG
        5QBpx+UAasflAGPH5wBkx+cAaMfmAGnH5gBnx+cAaMfnAGbI5wBnyOcAZcjoAGbI6ADU1NQAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYHBwdX
        V1dXFBRYWAAAABYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        BwcHV1dXVxQUWFgAAAAWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFgcHB1dXV1cUFFhYAAAAFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYHBwdXV1dXFBRYWAAAABYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWBwcHV1dXVxQUWFgAAAAWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYWFhYWFhYWFgcHB1dXV1cUFFhYAAAAFhYWFhYWFhYWFhYWFhYWFhYWFygxOUJOVU5COTEo
        FxYWFhYWFhYWFhYWFhYWFhYWFhYHBwdXV1dXFBRYWAAAABYWFhYWFhYWFhYWFhYWFhYlNE1VVVNQSkpQ
        U1VVVU00JRYWFhYWFhYWFhYWFhYWFhYWBwcHV1dXVxQUWFgAAAAWFhYWFhYWFhYWFhYWFiQ2VVVVVVA7
        AwEBBkFPVVVVVVU2JBYWFhYWFhYWFhYWFhYWFgcHB1dXV1cUFFhYAAAAFhYWFhYWFhYWFhYWGC9VVVVV
        VVAVAQEBAQEBK09VVVVVVVUvGBYWFhYWFhYWFhYWFhYHBwdXV1dXFBRYWAAAABYWFhYWFhYWFhYWHjdV
        VVVVVVEaAQEBBAIBAQFGVlVVVVVVVTceFhYWFhYWFhYWFhYWBwcHV1dXVxQUWFgAAAAWFhYWFhYWFhYW
        JjxVVVVVVVY7AQEFDRMTCAEBFU9VVVVVVVVVPCYWFhYWFhYWFhYWFgcHB1dXV1cUFFhYAAAAFhYWFhYW
        FhYWJz9VVVVVVVVQAQEEDRMREQ0BAQ9PVVVVVVVVVVU/JxYWFhYWFhYWFhYHBwdXV1dXFBRYWAAAABYW
        FhYWFhYWIT5VVVVVVVVWMwEBDRMRERENAQEPT1VVVVVVVVVVVT4hFhYWFhYWFhYWBwcHV1dXVxQUWFgA
        AAAWFhYWFhYWGzhVVVVVVVVVTwEBBRMRERETCwEBO1ZVVVVVVVVVVVVVOBsWFhYWFhYWFgcHB1dXV1cU
        FFhYAAAAFhYWFhYWFjJVVVVVVVVVVUkBAQwTEREREwgBAUtVVVVVVVVVVVVVVVUyFhYWFhYWFhYHBwdX
        V1dXFBRYWAAAABYWFhYWFipVVVVVVVVVVVU7AQENExERERIBARpTVVVVVVVVVVVVVVVVVSoWFhYWFhYW
        BwcHV1dXVxQUWFgAAAAWFhYWFhc+VVVVVVVVVVVRAwEEExERERMJAQFJVVVVVVVVVVVVVVVVVVU+FxYW
        FhYWFgcHB1dXV1cUFFhYAAAAFhYWFhYtVVVVVVVVVVVWOgEBDBMRERMNAQEVUVVVVVVVVVVVVVVVVVVV
        VS0WFhYWFhYHBwdXV1dXFBRYWAAAABYWFhYZQlVVVVVVVVVVSQEBCBMRERETCQEBR1VVVVVVVVVVVVVV
        VVVVVVVCGRYWFhYWBwcHV1cAAAAAAFgAAAAWFhYWLFVVVVVVVVVVVAoBBBMREREREwQBA1FVVVVVVVVV
        VVVVVVVVVVVVVSwWFhYWFgcHB1dXAAAAAABYAAAAFhYWFj1VVVVVVVVVVUgBAQ0TEREREQ0BATNWVVVV
        VVVVVVVVVVVVVVVVVVU9FhYWFhYHBwdXVwAAAAAAWAAAABYWFiNVVVVVVVVVVVEBAQgTERERERMJAQFJ
        VVVVVVVVVVVVVVVVVVVVVVVVVSMWFhYWBwcHV1cAAAAAAFgAAAAWFhYwVVVVVVVVVVVDAQENEREREREN
        AQEgU1VVVVVVVVVVVVVVVVVVVVVVVVUwFhYWFgcHB1dXAAAAAABYAAAAFhYWQFVVVVVVVVVSAQEIExER
        ERETCQEBUFVVVVVVVVVVVVVVVVVVVVVVVVVVQBYWFhYHBwdXVwAAAAAAWAAAABYWHFVVVVVVVVVVSAEB
        DRERERERDQEBQVZVVVVVVVVVVVVVVVVVVVVVVVVVVVUcFhYWBwcHV1dXVxQUWFgAAAAWFilVVVVVVVVV
        VBUBARMREREREwkBAUFPVlVVVVVVVVVVVVVVVVVVVVVVVVVVKRYWFgcHB1dXV1cUFFhYAAAAFhYuVVVV
        VVVVVVABAQgTERERExIEAQEBATNQU1VVVVVVVVVVVVVVVVVVVVVVVS4WFhYHBwdXV1dXFBRYWAAAABYW
        NVVVVVVVVVY7AQEMExERERMNCAEBAQEBASJQU1VVVVVVVVVVVVVVVVVVVVU1FhYWBwcHV1dXVxQUWFgA
        AAAWFjxVVVVVVVVSBgEBDRMRERMTExINCwkEAQEBATNRVVVVVVVVVVVVVVVVVVVVPBYWFgcHB1dXV1cU
        FFhYAAAAFhZCVVVVVVVVSAEBCBMRERMTExMTExMTEw0IAQEBFVBVVVVVVVVVVVVVVVVVVUIWFhYHBwdX
        V1dXFBRYWAAAABYWTVVVVVVVUxoBAQsTERETDQwTExERERETEw0IAQEVUlVVVVVVVVVVVVVVVVVNFhYW
        BwcHV1dXVxQUWFgAAAAWFlVVVVVVVUsBAQQTERETDQUCCQ0TEREREREREwkBAStTVVVVVVVVVVVVVVVV
        VRYWFgcHB1dXV1cUFFhYAAAAFhZVVVVVVVYzAQEJExEREwkBAQEFDRMRERERERETCAEBSFZVVVVVVVVV
        VVVVVVUWFhYHBwdXV1dXFBRYWAAAABYWTVVVVVVPAQEBDRMREw0BAQEBAQEJExMRERERERICAQFQVVVV
        VVVVVVVVVVVNFhYWBwcHV1dXVxQUWFgAAAAWFkJVVVVWRAEBCBMRERMJAQEPCgEBAQQNExERERETCwEB
        EFFVVVVVVVVVVVVVQhYWFgcHB1dXV1cUFFhYAAAAFhY8VVVVTwoBAQ0TERMNAgEBTE9DBgEBAQwTERER
        ERMJAQFDVlVVVVVVVVVVVTwWFhYHBwdXV1dXFBRYWAAAABYWNVVVVUcBAQUTERETDAEBIlNVVlFDAQEB
        CRMREREREgEBClFVVVVVVVVVVVU1FhYWBwcHV1dXVxQUWFgAAAAWFi5VVVMrAQEMExETEwUBAUpVVVVV
        VU8VAQEMExERERMIAQFQVVVVVVVVVVVVLhYWFgcHB1dXV1cUFFhYAAAAFhYpVVVPBgEBDRMREw0BAQ9R
        VVVVVVVVUQYBBBMRERETCQEBSVVVVVVVVVVVVSkWFhYHBwdXV1dXFBRYWAAAABYWHFVVTAEBBBMRERMM
        AQFBVlVVVVVVVVVDAQENExEREwwBAUdVVVVVVVVVVVUcFhYWBwcHV1dXVxQUWFgAAAAWFhZAVUkBAQgT
        ERETDAEBR1VVVVVVVVVWOwEBDRMRERMMAQFKVVVVVVVVVVVAFhYWFgcHB1dXV1cUFFhYAAAAFhYWMFVJ
        AQEIExEREw0BASJRVVVVVVVTSAEBCBMRERETCAEBTFVVVVVVVVVVMBYWFhYHBwdXV1dXFBRYWAAAABYW
        FiNVUAEBBRMRERETCQEBBjtHSUlIFQEBBA0TEREREwUBA09VVVVVVVVVVSMWFhYWBwcHV1dXVxQUWFgA
        AAAWFhYWPVEKAQETERERERMJAQEBAQEBAQEBBA0TEREREQ0BAR9TVVVVVVVVVT0WFhYWFgcHB1dXV1cU
        FFhYAAAAFhYWFixTMwEBDRMREREREwwCAQEBAQEBCRMTERERERMJAQFKVVVVVVVVVVUsFhYWFhYHBwdX
        Vx0dHR0dHQAAABYWFhYZQlABAQUTERERERETEw0JCAkMDRMRERERERMNAQEVUVVVVVVVVVVCGRYWFhYW
        BwcHV1cdHR0dHR0AAAAWFhYWFi1TMwEBDBMRERERERETExMTExMRERERERMNAgEBUFVVVVVVVVVVLRYW
        FhYWFgcHB1dXHR0dHR0dAAAAFhYWFhYXPlEDAQENExERERERERERERERERERERMNAQEBRVZVVVVVVVVV
        PhcWFhYWFhYHBwdXVx0dHR0dHQAAABYWFhYWFipVSQEBAgsTExMTExMRERERERMTExMMAQEBRFNVVVVV
        VVVVVSoWFhYWFhYWBwcHV1cdHR0dHR0AAAAWFhYWFhYWMlZDAQEBAggMCw0NExMTExINDAgBAQEBQ1NV
        VVVVVVVVVTIWFhYWFhYWFgcHB1dXHR0dHR0dAAAAFhYWFhYWFhs4VkcGAQEBAQEBAQIEBAIBAQEBAQEK
        SVZVVVVVVVVVVTgbFhYWFhYWFhYHBwdXV1dXFBRYWAAAABYWFhYWFhYWIT5VUUMVAQEBAQEBAQEBAQEB
        AQ9IUVVVVVVVVVVVVT4hFhYWFhYWFhYWBwcHV1dXVxQUWFgAAAAWFhYWFhYWFhYnP1VVU09JQSsOAwEB
        AQoaQ1BTVVVVVVVVVVVVVT8nFhYWFhYWFhYWFgcHB1dXV1cUFFhYAAAAFhYWFhYWFhYWFiY8VVVVVVVT
        UU9QUFBPUVVVVVVVVVVVVVVVVTwmFhYWFhYWFhYWFhYHBwdXV1dXFBRYWAAAABYWFhYWFhYWFhYWHjdV
        VVVVVVVVVVVVVVVVVVVVVVVVVVVVVTceFhYWFhYWFhYWFhYWBwcHV1dXVxQUWFgAAAAWFhYWFhYWFhYW
        FhYYL1VVVVVVVVVVVVVVVVVVVVVVVVVVVS8YFhYWFhYWFhYWFhYWFgcHB1dXV1cUFFhYAAAAFhYWFhYW
        FhYWFhYWFhYkNlVVVVVVVVVVVVVVVVVVVVVVNiQWFhYWFhYWFhYWFhYWFhYHBwdXV1dXFBRYWAAAABYW
        FhYWFhYWFhYWFhYWFhYlNE1VVVVVVVVVVVVVVU00JRYWFhYWFhYWFhYWFhYWFhYWBwcHV1dXVxQUWFgA
        AAAWFhYWFhYWFhYWFhYWFhYWFhYXKDE5Qk5VTkI5MSgXFhYWFhYWFhYWFhYWFhYWFhYWFgcHB1dXV1cU
        FFhYAAAAFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYHBwdX
        V1dXFBRYWAAAABYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        BwcHV1dXVxQUWFgAAAAWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFgcHB1dXV1cUFFhYAAAAFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYW
        FhYWFhYWFhYHBwdXV1dXFBRYWAAAAAAAAAAAAAAYAAAAAAAAABgAAAAAAAAAGAAAAAAAAAAYAAAAAAAA
        ABgAAAAAAAAAGAAAAAAAAAAYAAAAAAAAABgAAAAAAAAAGAAAAAAAAAAYAAAAAAAAABgAAAAAAAAAGAAA
        AAAAAAAYAAAAAAAAABgAAAAAAAAAGAAAAAAAAAAYAAAAAAAAABgAAAAAAAAAGAAAAAAAAAAYAAAAAAAA
        AAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAABgAAAAAAAAAGAAA
        AAAAAAAYAAAAAAAAABgAAAAAAAAAGAAAAAAAAAAYAAAAAAAAABgAAAAAAAAAGAAAAAAAAAAYAAAAAAAA
        ABgAAAAAAAAAGAAAAAAAAAAYAAAAAAAAABgAAAAAAAAAGAAAAAAAAAAYAAAAAAAAABgAAAAAAAAAGAAA
        AAAAAAAYAAAAAAAAABgAAAAAAAAAGAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAYAAAAAAAAABgAAAAAAAAAGAAAAAAAAAAYAAAAAAAAABgAAAAAAAAAGAAA
        AAAAAAAYAAAAAAAAABgAAAAAAAAAGAAAAAAAAAAYAAAAAAAAABgAAAAAAAAAGAAAAAAAAAAY
</value>
  </data>
</root>