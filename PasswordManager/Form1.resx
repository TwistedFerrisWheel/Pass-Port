<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAQEAAAAEACAAoFgAAFgAAACgAAABAAAAAgAAAAAEACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AACNV/YASY6rAPadVwCZmZkAN5rFAEWcxQBQn8YAZKTHAGmlxwBvp8gAcajIAHKoyAB6q8gAe6vIAH6s
        yQCDrskAha/JAIavyQCIsMkAubm5AJq3ywCeucwAn7nMAKa8zACnvcwArL/NAK7AzQCvwM0AsMHNALPC
        zgC0w84AtsTOALfEzgC6xs8Au8bPALzHzwDCytAAw8rQAMfM0ADIzdAAy87RAMzP0QDO0NEAz9DRANDR
        0QDR0dIA0tLSAP///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAQEBAQEBBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
        BAQEBBMDEy8vLwEBAQEBAQQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
        BAQEBAQEBAQTAxMvLy8BAQEBAQEEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
        BAQEBAQEBAQEBAQEEwMTLy8vAQEBAQEBBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
        BAQEBAQEBAQEBAQEBAQEBBMDEy8vLwEBAQEBAQQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
        BAQEBAQEBAQEBAQEBAQEBAQEBAQTAxMvLy8BAQEBAQEEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
        BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEEwMTLy8vAQEBAQEBBAQEBAQEECIuIhAEBAQEBAQEBAQEBAQE
        BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBBMDEy8vLwEBAQEBAQQEBAQEDyYuLi4mDwQEBAQEBAQE
        BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQTAxMvLy8BAQEBAQEEBAQEBCMuLi4uLiMEBAQE
        BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEEwMTLy8vAQEBAQEBBAQEBBEuLi4uLi4u
        EQQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBBMDEy8vLwEBAQEBAQQEBAQZLi4u
        Li4uLhkEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQTAxMvLy8BAQEBAQEEBAQE
        JC4uLi4uLi4kBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEEwMTLy8vAQEBAQEB
        BAQEBCouLi4uLi4uKgQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBBMDEy8vLwEB
        AQEBAQQEBAQuLi4uLi4uLi4EBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQTAxMv
        Ly8BAQEBAQEEBAQEKi4uLi4uLi4qBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
        EwMTLy8vAQEBAQEBBAQEBCQuLi4uLi4uJAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
        BAQEBBMDEy8vLwEBAQEBAQQEBAQZLi4uLi4uLhkEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
        BAQEBAQEBAQTAxMvLy8BAQEBAQEEBAQEES4uLi4uLi4RBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
        BAQEBAQEBAQEBAQEEwMTLy8vAQEBAQEBBAQEBAQjLi4uLi4jBAQEBAQEBAQEDRUeJSktLSklHhUNBAQE
        BAQEBAQEBAQEBAQEBAQEBBMDEy8vLwEBAQEBAQQEBAQEDyYuLi4mDwQEBAQEBAoXJy4uLi4uLi4uLi4u
        LicXCgQEBAQEBAQEBAQEBAQEBAQTAxMvLy8BAQEBAQEEBAQEBAQQIi4iEAQEBAQECRkuLi4uLi4uLi4u
        Li4uLi4uLi4ZCQQEBAQEBAQEBAQEBAQEEwMTLy8vAQEBAQEBBAQEBAQEBAQEBAQEBAQEFCguLi4uLi4u
        Li4uLi4uLi4uLi4uLigUBAQEBAQEBAQEBAQEBBMDEy8vLwEBAQEBAQQEBAQEBAQEBAQEBAQHGi4uLi4u
        Li4uLi4uLi4uLi4uLi4uLi4uLhoHBAQEBAQEBAQEBAQTAxMvLy8BAQEBAQEEBAQEBAQEBAQEBAQLHy4u
        Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uHwsEBAQEBAQEBAQEEwMTLy8vAQEBAQEBBAQEBAQEBAQEBAQI
        IC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4gCAQEBAQEBAQEBBMDEy8vLwEBAQEBAQQEBAQEBAQE
        BAQFHC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLhwFBAQEBAQEBAQTAxMvLy8BAQEBAQEEBAQE
        BAQEBAQEFi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uFgQEBAQEBAQEEwMTLy8vAQEBAQEB
        BAQEBAQEBAQEDCwuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiwMBAQEBAQEBBMDAAAAAAEB
        AQEBAQQEBAQEBAQEBB0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uHQQEBAQEBAQTAwAA
        AAABAQEBAQEEBAQEBAQEBA4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4OBAQEBAQE
        EwMTLy8vAQEBAQEBBAQEBAQEBAQbLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uGwQE
        BAQEBBMDEy8vLwEBAQEBAQQEBAQEBAQGKy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4u
        LisGBAQEBAQTAxMvLy8BAQEBAQEEBAQEBAQEEi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4u
        Li4uLi4uEgQEBAQEEwMTLy8vAQEBAQEBBAQEBAQEBBguLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4u
        Li4uLi4uLi4uLhgEBAQEBBMDEy8vLwEBAQEBAQQEBAQEBAQhLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4u
        Li4uLi4uLi4uLi4uLi4hBAQEBAQTAxMvLy8BAQEBAQEEBAQEBAQEJi4uLi4uLi4uLi4uLi4uLi4uLi4u
        Li4uLi4uLi4uLi4uLi4uLi4uJgQEBAQEEwMTLy8vAQEBAQEBBAQEBAQEBCsuLi4uLi4uLi4uLi4uLi4u
        Li4uLi4uLi4uLi4uLi4uLi4uLi4uLisEBAQEBBMDEy8vLwEBAQEBAQQEBAQEBAQuLi4uLi4uLi4uLi4u
        Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uBAQEBAQTAxMvLy8BAQEBAQEEBAQEBAQEKy4uLi4uLi4u
        Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uKwQEBAQEEwMTLy8vAQEBAQEBBAQEBAQEBCYuLi4u
        Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLiYEBAQEBBMDEy8vLwEBAQEBAQQEBAQEBAQh
        Li4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4hBAQEBAQTAwICAgIBAQEBAQEEBAQE
        BAQEGC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uGAQEBAQEEwMCAgICAQEBAQEB
        BAQEBAQEBBIuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLhIEBAQEBBMDEy8vLwEB
        AQEBAQQEBAQEBAQGKy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLisGBAQEBAQTAxMv
        Ly8BAQEBAQEEBAQEBAQEBBsuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4bBAQEBAQE
        EwMTLy8vAQEBAQEBBAQEBAQEBAQOLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uDgQE
        BAQEBBMDEy8vLwEBAQEBAQQEBAQEBAQEBB0uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4u
        HQQEBAQEBAQTAxMvLy8BAQEBAQEEBAQEBAQEBAQMLC4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4u
        Li4uLAwEBAQEBAQEEwMTLy8vAQEBAQEBBAQEBAQEBAQEBBYuLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4u
        Li4uLi4uLhYEBAQEBAQEBBMDEy8vLwEBAQEBAQQEBAQEBAQEBAQFHC4uLi4uLi4uLi4uLi4uLi4uLi4u
        Li4uLi4uLi4uLhwFBAQEBAQEBAQTAxMvLy8BAQEBAQEEBAQEBAQEBAQEBAggLi4uLi4uLi4uLi4uLi4u
        Li4uLi4uLi4uLi4uLiAIBAQEBAQEBAQEEwMTLy8vAQEBAQEBBAQEBAQEBAQEBAQECx8uLi4uLi4uLi4u
        Li4uLi4uLi4uLi4uLi4uLh8LBAQEBAQEBAQEBBMDEy8vLwEBAQEBAQQEBAQEBAQEBAQEBAQHGi4uLi4u
        Li4uLi4uLi4uLi4uLi4uLi4uLhoHBAQEBAQEBAQEBAQTAxMvLy8BAQEBAQEEBAQEBAQEBAQEBAQEBAQU
        KC4uLi4uLi4uLi4uLi4uLi4uLi4uKBQEBAQEBAQEBAQEBAQEEwMTLy8vAQEBAQEBBAQEBAQEBAQEBAQE
        BAQEBAkZLi4uLi4uLi4uLi4uLi4uLi4uGQkEBAQEBAQEBAQEBAQEBBMDEy8vLwEBAQEBAQQEBAQEBAQE
        BAQEBAQEBAQEBAoXJy4uLi4uLi4uLi4uLicXCgQEBAQEBAQEBAQEBAQEBAQTAxMvLy8BAQEBAQEEBAQE
        BAQEBAQEBAQEBAQEBAQEBAQNFR4lKS0tKSUeFQ0EBAQEBAQEBAQEBAQEBAQEBAQEEwMTLy8vAQEBAQEB
        BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBBMDEy8vLwEB
        AQEBAQQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQTAxMv
        Ly8BAQEBAQEEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
        EwMTLy8vAQEBAQEBBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
        BAQEBBMDEy8vLwEBAQEBAQQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
        BAQEBAQEBAQTAxMvLy8BAQEBAQEEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
        BAQEBAQEBAQEBAQEEwMTLy8vAQEBAQEBBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE
        BAQEBAQEBAQEBAQEBAQEBBMDEy8vLwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>